{"ast":null,"code":"import _toConsumableArray from\"/Users/bengallagher/Desktop/projects/ecommerce-store/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/bengallagher/Desktop/projects/ecommerce-store/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useReducer}from'react';import{UPDATE_PRODUCTS,UPDATE_CATEGORIES,UPDATE_CURRENT_CATEGORY,ADD_TO_CART,ADD_MULTIPLE_TO_CART,REMOVE_FROM_CART,UPDATE_CART_QUANTITY,CLEAR_CART,TOGGLE_CART}from\"./actions\";export var reducer=function reducer(state,action){switch(action.type){// if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\ncase UPDATE_PRODUCTS:return _objectSpread(_objectSpread({},state),{},{products:_toConsumableArray(action.products)});// if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\ncase UPDATE_CATEGORIES:return _objectSpread(_objectSpread({},state),{},{categories:_toConsumableArray(action.categories)});case UPDATE_CURRENT_CATEGORY:return _objectSpread(_objectSpread({},state),{},{currentCategory:action.currentCategory});case ADD_TO_CART:return _objectSpread(_objectSpread({},state),{},{cartOpen:true,cart:[].concat(_toConsumableArray(state.cart),[action.product])});case ADD_MULTIPLE_TO_CART:return _objectSpread(_objectSpread({},state),{},{cart:[].concat(_toConsumableArray(state.cart),_toConsumableArray(action.products))});case REMOVE_FROM_CART:var newState=state.cart.filter(function(product){return product._id!==action._id;});return _objectSpread(_objectSpread({},state),{},{cartOpen:newState.length>0,cart:newState});case UPDATE_CART_QUANTITY:return _objectSpread(_objectSpread({},state),{},{cartOpen:true,cart:state.cart.map(function(product){if(action._id===product._id){product.purchaseQuantity=action.purchaseQuantity;}return product;})});case CLEAR_CART:return _objectSpread(_objectSpread({},state),{},{cartOpen:false,cart:[]});case TOGGLE_CART:return _objectSpread(_objectSpread({},state),{},{cartOpen:!state.cartOpen});default:return state;}};export function useProductReducer(initialState){return useReducer(reducer,initialState);}","map":{"version":3,"sources":["/Users/bengallagher/Desktop/projects/ecommerce-store/client/src/utils/reducers.js"],"names":["useReducer","UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","CLEAR_CART","TOGGLE_CART","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","_id","length","map","purchaseQuantity","useProductReducer","initialState"],"mappings":"2WAAA,OAASA,UAAT,KAA2B,OAA3B,CACA,OACIC,eADJ,CAEIC,iBAFJ,CAGIC,uBAHJ,CAIIC,WAJJ,CAKIC,oBALJ,CAMIC,gBANJ,CAOIC,oBAPJ,CAQIC,UARJ,CASIC,WATJ,KAUS,WAVT,CAYE,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAQC,MAAR,CAAmB,CACxC,OAAQA,MAAM,CAACC,IAAf,EACE;AACA,IAAKZ,CAAAA,eAAL,CACE,sCACKU,KADL,MAEEG,QAAQ,oBAAMF,MAAM,CAACE,QAAb,CAFV,GAIF;AACA,IAAKZ,CAAAA,iBAAL,CACE,sCACKS,KADL,MAEEI,UAAU,oBAAMH,MAAM,CAACG,UAAb,CAFZ,GAIA,IAAKZ,CAAAA,uBAAL,CACI,sCACKQ,KADL,MAEEK,eAAe,CAAEJ,MAAM,CAACI,eAF1B,GAIJ,IAAKZ,CAAAA,WAAL,CACI,sCACQO,KADR,MAEIM,QAAQ,CAAE,IAFd,CAGIC,IAAI,8BAAMP,KAAK,CAACO,IAAZ,GAAkBN,MAAM,CAACO,OAAzB,EAHR,GAKJ,IAAKd,CAAAA,oBAAL,CACI,sCACOM,KADP,MAEIO,IAAI,8BAAMP,KAAK,CAACO,IAAZ,qBAAqBN,MAAM,CAACE,QAA5B,EAFR,GAIJ,IAAKR,CAAAA,gBAAL,CACI,GAAIc,CAAAA,QAAQ,CAAGT,KAAK,CAACO,IAAN,CAAWG,MAAX,CAAkB,SAAAF,OAAO,CAAI,CACxC,MAAOA,CAAAA,OAAO,CAACG,GAAR,GAAgBV,MAAM,CAACU,GAA9B,CACH,CAFc,CAAf,CAIA,sCACOX,KADP,MAEIM,QAAQ,CAAEG,QAAQ,CAACG,MAAT,CAAkB,CAFhC,CAGIL,IAAI,CAAEE,QAHV,GAKJ,IAAKb,CAAAA,oBAAL,CACI,sCACOI,KADP,MAEIM,QAAQ,CAAE,IAFd,CAGIC,IAAI,CAAEP,KAAK,CAACO,IAAN,CAAWM,GAAX,CAAe,SAAAL,OAAO,CAAI,CAC5B,GAAIP,MAAM,CAACU,GAAP,GAAeH,OAAO,CAACG,GAA3B,CAA+B,CAC3BH,OAAO,CAACM,gBAAR,CAA2Bb,MAAM,CAACa,gBAAlC,CACH,CACD,MAAON,CAAAA,OAAP,CACH,CALK,CAHV,GAUJ,IAAKX,CAAAA,UAAL,CACA,sCACOG,KADP,MAEIM,QAAQ,CAAE,KAFd,CAGIC,IAAI,CAAE,EAHV,GAKA,IAAKT,CAAAA,WAAL,CACI,sCACOE,KADP,MAEIM,QAAQ,CAAE,CAACN,KAAK,CAACM,QAFrB,GAMN,QACE,MAAON,CAAAA,KAAP,CAhEJ,CAkED,CAnEM,CAqEP,MAAO,SAASe,CAAAA,iBAAT,CAA2BC,YAA3B,CAAyC,CAC5C,MAAO3B,CAAAA,UAAU,CAACU,OAAD,CAAUiB,YAAV,CAAjB,CACH","sourcesContent":["import { useReducer } from 'react';\nimport {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART\n  } from \"./actions\";\n  \n  export const reducer = (state, action) => {\n    switch (action.type) {\n      // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n      case UPDATE_PRODUCTS:\n        return {\n          ...state,\n          products: [...action.products]\n        };\n      // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n      case UPDATE_CATEGORIES:\n        return {\n          ...state,\n          categories: [...action.categories]\n        };\n        case UPDATE_CURRENT_CATEGORY:\n            return {\n              ...state,\n              currentCategory: action.currentCategory\n            };\n        case ADD_TO_CART:\n            return {\n                 ...state,\n                cartOpen: true,\n                cart: [...state.cart, action.product]\n            };\n        case ADD_MULTIPLE_TO_CART:\n            return {\n                ...state,\n                cart: [...state.cart, ...action.products]\n            };\n        case REMOVE_FROM_CART:\n            let newState = state.cart.filter(product => {\n                return product._id !== action._id;\n            });\n\n            return {\n                ...state,\n                cartOpen: newState.length > 0,\n                cart: newState\n            };    \n        case UPDATE_CART_QUANTITY:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: state.cart.map(product => {\n                    if (action._id === product._id){\n                        product.purchaseQuantity = action.purchaseQuantity;\n                    }\n                    return product;\n                })\n            };\n        case CLEAR_CART:\n        return {\n            ...state,\n            cartOpen: false,\n            cart: [],\n        };\n        case TOGGLE_CART:\n            return {\n                ...state,\n                cartOpen: !state.cartOpen\n            };        \n        \n  \n      default:\n        return state;\n    }\n  };\n\n  export function useProductReducer(initialState) {\n      return useReducer(reducer, initialState);\n  }\n  "]},"metadata":{},"sourceType":"module"}